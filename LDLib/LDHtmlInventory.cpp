#include "LDHtmlInventory.h"
#include "LDPartsList.h"
#include "LDPartCount.h"
#include <LDLoader/LDLMainModel.h>
#include "LDPreferences.h"
#include <string>

const char *LDHtmlInventory::sm_style = "\
body\n\
{\n\
	font-family: tahoma, sans-serif;\n\
}\n\
\n\
table\n\
{\n\
	border-collapse: collapse;\n\
	border: 2px solid #000000;\n\
	background-color: #FFFFDD;\n\
	padding: 0px;\n\
}\n\
\n\
th.titleImage\n\
{\n\
	background-color: #EEEEEE;\n\
	color: #000000;\n\
	font-size: 150%;\n\
	border-bottom-style: none;\n\
	padding-bottom: 0px;\n\
}\n\
\n\
th\n\
{\n\
	background-color: #0080D0;\n\
	color: #FFFFFF;\n\
	border-bottom: 1px solid #000000;\n\
	border-right: 1px solid #00558A;\n\
	padding: 4px 8px;\n\
}\n\
\n\
th.title\n\
{\n\
	background-color: #EEEEEE;\n\
	color: #000000;\n\
	font-size: 150%;\n\
}\n\
\n\
td\n\
{\n\
	vertical-align: top;\n\
	background-color: #FFFFDD;\n\
	border-bottom: 1px solid #BFBFA5;\n\
	border-right: 1px solid #BFBFA5;\n\
	padding: 2px 8px;\n\
}\n\
\n\
td.quantity\n\
{\n\
	text-align: right;\n\
}\n\
\n\
td.colorNumber\n\
{\n\
	text-align: right;\n\
	border-right-style: none;\n\
}\n\
\n\
td.image\n\
{\n\
	border-right-style: none;\n\
}\n\
\n\
table.credits\n\
{\n\
	border-collapse: collapse;\n\
	border-style: none;\n\
	background-color: transparent;\n\
	margin: 0px;\n\
	width: 100%;\n\
}\n\
\n\
td.credits\n\
{\n\
	background-color: #EEEEEE;\n\
	border-style: none;\n\
	padding: 0px;\n\
}\n\
\n\
table.credits td\n\
{\n\
	background-color: transparent;\n\
	color: #808080;\n\
	border-style: none;\n\
	font-size: 65%;\n\
}\n\
\n\
a\n\
{\n\
	text-decoration: none;\n\
	border-style: none;\n\
}\n\
\n\
a:link\n\
{\n\
	color: #000080;\n\
}\n\
\n\
a:visited\n\
{\n\
	color: #0000FF;\n\
}\n\
\n\
a:hover\n\
{\n\
	text-decoration: underline;\n\
	color: #000080;\n\
}\n\
\n\
img\n\
{\n\
	float: right;\n\
}\n\
\n\
th img\n\
{\n\
	float: none;\n\
}\n\
\n\
a img\n\
{\n\
	border-style: none;\n\
}\n\
\n\
:link:hover img\n\
{\n\
	background-color: #D0E8FF;\n\
}\n\
\n\
:visited:hover img\n\
{\n\
	background-color: #A0C0FF;\n\
}\n\
\n\
.colorBox\n\
{\n\
	border: 1px solid black;\n\
	width: 2em;\n\
	height: 1em;\n\
	float: right;\n\
	clear: none;\n\
	margin-left: 8px;\n\
}\n\
\n\
.colorName\n\
{\n\
	float: left;\n\
	clear: none;\n\
}\n\
";

const char *LDHtmlInventory::sm_cssHeader = "\
/* CSS Style Sheet auto-generated by LDView */\n\
\n\
";

LDHtmlInventory::LDHtmlInventory(void) :
	m_prefs(new LDPreferences)
{
	m_prefs->loadInventorySettings();
	m_showModel = m_prefs->getInvShowModel();
	m_externalCss = m_prefs->getInvExternalCss();
	m_lastSavePath = m_prefs->getInvLastSavePath();
}

LDHtmlInventory::~LDHtmlInventory(void)
{
}

void LDHtmlInventory::dealloc(void)
{
	m_prefs->release();
	TCObject::dealloc();
}

bool LDHtmlInventory::generateHtml(
	const char *filename,
	LDPartsList *partsList,
	const char *modelName)
{
	FILE *file = fopen(filename, "w");
	size_t nSlashSpot;

	m_lastSavePath = filename;
	nSlashSpot = m_lastSavePath.find_last_of("/\\");
	if (nSlashSpot < m_lastSavePath.size())
	{
		m_lastSavePath = m_lastSavePath.substr(0, nSlashSpot);
	}
	m_prefs->setInvLastSavePath(m_lastSavePath.c_str());
	m_prefs->commitInventorySettings();
	m_modelName = modelName;
	nSlashSpot = m_modelName.find_last_of("/\\");
	if (nSlashSpot < m_modelName.size())
	{
		m_modelName = m_modelName.substr(nSlashSpot + 1);
	}
	if (file)
	{
		const LDPartCountVector &partCounts = partsList->getPartCounts();
		int i, j;

		writeHeader(file);
		writeTableHeader(file);
		for (i = 0; i < (int)partCounts.size(); i++)
		{
			const LDPartCount &partCount = partCounts[i];
			const IntVector &colors = partCount.getColors();
			LDLModel *model = const_cast<LDLModel *>(partCount.getModel());
			LDLPalette *palette = model->getMainModel()->getPalette();
			//int partTotal = partCount.getTotalCount();

			for (j = 0; j < (int)colors.size(); j++)
			{
				int colorNumber = colors[j];
				LDLColorInfo colorInfo = palette->getAnyColorInfo(colorNumber);

				writePartRow(file, partCount, palette, colorInfo, colorNumber);
			}
		}
		writeTableFooter(file);
		writeFooter(file);
		fclose(file);
		return true;
	}
	else
	{
		return false;
	}
}

FILE *LDHtmlInventory::safeOpenCssFile(const std::string &cssFilename,
									   bool &match)
{
	FILE *cssFile = fopen(cssFilename.c_str(), "r");

	match = false;
	if (cssFile)
	{
		size_t headerSize = strlen(sm_cssHeader);
		size_t contentSize = strlen(sm_style);
		long lFileSize;

		fseek(cssFile, 0, SEEK_END);
		lFileSize = ftell(cssFile);
		fseek(cssFile, 0, SEEK_SET);
		//if ((size_t)lFileSize == headerSize + contentSize)
		{
			std::string fileHeader;
			std::string fileContents;

			fileHeader.resize(headerSize);
			fileContents.resize(contentSize);
			fread(&fileHeader[0], headerSize, 1, cssFile);
			fread(&fileContents[0], contentSize, 1, cssFile);
			if (fileHeader == sm_cssHeader &&
				fileContents == sm_style)
			{
				TCByte test;

				if (fread(&test, 1, 1, cssFile) == 0)
				{
					match = true;
				}
			}
		}
		fclose(cssFile);
		return NULL;
	}
	return fopen(cssFilename.c_str(), "w");
}

bool LDHtmlInventory::writeExternalCss(void)
{
	if (m_externalCss)
	{
		std::string cssFilename = m_lastSavePath + "/LDView.css";
		bool match;
		FILE *cssFile = safeOpenCssFile(cssFilename, match);

		if (cssFile)
		{
			fprintf(cssFile, "%s", sm_cssHeader);
			fprintf(cssFile, "%s", sm_style);
			fclose(cssFile);
		}
		if (cssFile || match)
		{
			return true;
		}
	}
	return false;
}

void LDHtmlInventory::writeHeader(FILE *file)
{
	fprintf(file, "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\" "
		"\"http://www.w3.org/TR/html4/strict.dtd\">\n");
	fprintf(file, "<html>\n");
	fprintf(file, "<head>\n");
	fprintf(file, "<meta http-equiv=\"content-type\" "
		"content=\"text/html;charset=utf-8\">\n");
	fprintf(file, "<title>Parts List for %s</title>\n",
		m_modelName.c_str());
	if (writeExternalCss())
	{
		fprintf(file, "<link rel=\"stylesheet\" type=\"text/css\" "
			"href=\"LDView.css\" />\n");
	}
	else
	{
		fprintf(file, "<style type=\"text/css\">\n");
		fprintf(file, "%s", sm_style);
		fprintf(file, "</style>\n");
	}
	fprintf(file, "</head>\n");
	fprintf(file, "<body>\n");
}

void LDHtmlInventory::writeFooter(FILE *file)
{
	fprintf(file, "</body>\n");
	fprintf(file, "</html>\n");
}

void LDHtmlInventory::writeTableHeader(FILE *file)
{
	fprintf(file, "<table>\n");
	fprintf(file, "	<thead>\n");
	if (m_showModel)
	{
		size_t nDotSpot = m_modelName.find('.');
		std::string modelName;

		if (nDotSpot < m_modelName.size())
		{
			modelName = m_modelName.substr(0, nDotSpot);
		}
		else
		{
			modelName = m_modelName;
		}
		fprintf(file, "		<tr>\n");
		fprintf(file, "			<th class=\"titleImage\" "
			"colspan=\"5\">\n");
		fprintf(file, "				<img alt=\"&lt;%s&gt;\" "
			"title=\"&lt;%s&gt;\" src=\"%s.png\">\n",
			m_modelName.c_str(), m_modelName.c_str(), modelName.c_str());
		fprintf(file, "			</th>\n");
		fprintf(file, "		</tr>\n");
	}
	fprintf(file, "		<tr>\n");
	fprintf(file, "			<th class=\"title\" colspan=\"5\">\n");
	fprintf(file, "				Parts List for %s\n",
		m_modelName.c_str());
	fprintf(file, "			</th>\n");
	fprintf(file, "		</tr>\n");
	fprintf(file, "		<tr>\n");
	fprintf(file, "			<th colspan=\"2\">Part</th>\n");
	fprintf(file, "			<th colspan=\"2\">Color</th>\n");
	fprintf(file, "			<th>Quantity</th>\n");
	fprintf(file, "		</tr>\n");
	fprintf(file, "	</thead>\n");
	fprintf(file, "	<tfoot>\n");
	fprintf(file, "		<tr>\n");
	fprintf(file, "			<td colspan=\"5\" class=\"credits\">\n");
	fprintf(file, "				<table class=\"credits\">\n");
	fprintf(file, "					<tbody>\n");
	fprintf(file, "						<tr>\n");
	fprintf(file, "							<td align=\"left\">\n");
	fprintf(file, "								This parts list "
		"generated by <a href=\"http://ldview.sourceforge.net/\">"
		"LDView</a>.\n");
	fprintf(file, "							</td>\n");
	fprintf(file, "							<td align=\"right\">\n");
	fprintf(file, "								Part images provided "
		"by <a href=\"http://www.peeron.com\">Peeron</a>.\n");
	fprintf(file, "							</td>\n");
	fprintf(file, "						</tr>\n");
	fprintf(file, "					</tbody>\n");
	fprintf(file, "				</table>\n");
	fprintf(file, "			</td>\n");
	fprintf(file, "		</tr>\n");
	fprintf(file, "	</tfoot>\n");
	fprintf(file, "	<tbody>\n");
}

void LDHtmlInventory::writeTableFooter(FILE *file)
{
	fprintf(file, "	</tbody>\n");
	fprintf(file, "</table>\n");
}

void LDHtmlInventory::writePartRow(
	FILE *file,
	const LDPartCount &partCount,
	LDLPalette *palette,
	const LDLColorInfo &colorInfo,
	int colorNumber)
{
	std::string partName = partCount.getFilename();
	size_t nDotSpot = partName.find('.');
	int peeronColorNumber = colorNumber;
	int r, g, b, a;
	std::string imgStyle;

	palette->getRGBA(colorInfo, r, g, b, a);
	if (colorNumber >= 512)
	{
		char bgColor[10];

		sprintf(bgColor, "%02X%02X%02X", r, g, b);
		peeronColorNumber = 7;
		imgStyle = (std::string)"style = \"padding: 4px; "
			"background-color: #" + bgColor + "\" ";
	}
	if (nDotSpot < partName.size())
	{
		partName = partName.substr(0, nDotSpot);
	}
	fprintf(file, "		<tr>\n");
	fprintf(file, "			<td class=\"image\">"
		"<a href=\"http://peeron.com/inv/parts/%s\">"
		"<img %salt=\"View part on Peeron\" "
		"title=\"View part on Peeron\" "
		"src=\"http://media.peeron.com/ldraw/images/%d/100/%s.png\">"
		"</a></td>\n",
		partName.c_str(), imgStyle.c_str(), peeronColorNumber,
		partName.c_str());
	fprintf(file, "			<td>%s</td>\n", partName.c_str());
	if (strlen(colorInfo.name))
	{
		fprintf(file, "			<td class=\"colorNumber\">%d:</td>\n",
			colorNumber);
		fprintf(file, "			<td><div class=\"colorName\">%s</div>",
			colorInfo.name);
	}
	else
	{
		if (colorNumber < 512)
		{
			fprintf(file, "			<td class=\"colorNumber\">%d"
				"</td>\n", colorNumber);
		}
		else
		{
			fprintf(file, "			<td class=\"colorNumber\">#%X"
				"</td>\n", colorNumber);
		}
		fprintf(file, "			<td>");
	}
	fprintf(file, "<div class=\"colorBox\" style="
		"\"background-color: #%02X%02X%02X\"></div></td>\n", r, g, b);
	fprintf(file, "			<td class=\"quantity\">%d</td>\n",
		partCount.getColorCount(colorNumber));
	fprintf(file, "		</tr>\n");
}

void LDHtmlInventory::setShowModelFlag(bool value)
{
	m_showModel = value;
	m_prefs->setInvShowModel(value);
}

void LDHtmlInventory::setExternalCssFlag(bool value)
{
	m_externalCss = value;
	m_prefs->setInvExternalCss(value);
}

